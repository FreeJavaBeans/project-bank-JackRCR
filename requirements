Requirements
1. Functionality should reflect the below user stories.--in progress
2. Data is stored in a database.--done
3. Data Access is performed through the use of JDBC in a data layer consisting of Data Access Objects.--not sure
4. All input is received using the java.util.Scanner class or java.io.Console.--done
5. Log4j is implemented to log events to a file.--I put together... something.  Why it works is beyond me.
6. A minimum of one (1) JUnit test is written to test some functionality.--got one to work, ignore all the red.  It's not a murder scene, no one is dead.


User stories
As a user, I can login.
2 points--done
As a customer, I can apply for a new bank account with a starting balance.
3 points--done

As a customer, I can view the balance of a specific account.
1 point--I show all at once.  This is a weird requirement.
As a customer, I can make a withdrawal or deposit to a specific account.
2 points--taking a look at.  I think this means to do within a single session immediately.  Internal transfer.  Could add logic to detect such curcumstances, but tricky.
As the system, I reject invalid transactions.
Ex:
A withdrawal that would result in a negative balance.
A deposit or withdrawal of negative money.
2 points--will put constraints in, kinda works.

As an employee, I can approve or reject an account.
2 points--Done
As an employee, I can view a customer's bank accounts.
1 point--Done

As a user, I can register for a customer account.
3 points--done
As a customer, I can post a money transfer to another account.
3 points--done--some hiccups though, like only being able to do one per account.  Need to fix that, by attatching a serial or TIMESTAMP to the transaction.  Serial is better though for now.
As a customer, I can accept a money transfer from another account.
2 points--done, with some hiccups.
A an employee, I can view a log of all transactions.
2 points--//don't have the infrastructure to implement this.  need to overhaul transactions


Total: 